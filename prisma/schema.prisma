// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum UserRole {
  EDITOR
  YOUTUBER
} 
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole        @default(YOUTUBER)
  youtubers     String[]
  editors       String[]
  editedVideos  Video[] @relation("VideoEditor")
  createdVideos Video[] @relation("VideoYoutuber")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String 
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Video {
  id          String   @id @default(cuid())
  editorId    String
  youtuberId  String
  title       String?
  tags        String[]
  description String?
  url         String
  thumbnail   String?
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  verified    DateTime?
  updatedAt   DateTime @updatedAt

  editor      User @relation("VideoEditor", fields: [editorId], references: [id])
  youtuber    User @relation("VideoYoutuber", fields: [youtuberId], references: [id])
  verification VideoVerification? @relation("VideoVerification")
}

model VideoVerification {
  id         String   @id @default(cuid())
  videoId     String  @unique
  verified    Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  video       Video @relation("VideoVerification", fields: [videoId], references: [id])
}